version: '2'

services:

  udp-packet-forwarder:
    image: rakwireless/udp-packet-forwarder:latest
    container_name: udp-packet-forwarder
    restart: unless-stopped
    privileged: true
    networks:
      - bridge
    environment:
      
      # The service will auto-discover the concentrator (not for SX1301 concentrators),
      # but you can also specify it manually:
      #MODEL: "RAK5146"
      #INTERFACE: "SPI"
      #DEVICE: "/dev/spidev0.0"
      #GATEWAY_EUI_SOURCE: "chip"
      #GATEWAY_EUI: "0102030405060708"
      
      SERVER_HOST: stack
      SERVER_PORT: 1700

  postgres:
    image: postgres:14.3-alpine3.15
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=root
      - POSTGRES_DB=ttn_lorawan
    networks:
      - bridge
    volumes:
      - 'postgres:/var/lib/postgresql/data'
    ports:
      - "5432:5432"

  redis:
    image: redis:7.0.0-alpine3.15
    container_name: redis
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - bridge
    volumes:
      - 'redis:/data'
    ports:
      - "6379:6379"

  stack:
    image: xoseperez/the-things-stack:latest
    container_name: stack
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    networks:
      - bridge
    volumes:
      - 'stack-blob:/srv/ttn-lorawan/public/blob'
      - 'stack-data:/srv/data'
    environment:
      TTS_DOMAIN: 10.2.21.157
      CLI_AUTO_LOGIN: "true"
      TTN_LW_BLOB_LOCAL_DIRECTORY: /srv/ttn-lorawan/public/blob
      TTN_LW_REDIS_ADDRESS: redis:6379
      TTN_LW_IS_DATABASE_URI: postgres://root:root@postgres:5432/ttn_lorawan?sslmode=disable
      WAIT_HOSTS: redis:6379, postgres:5432
      WAIT_HOSTS_TIMEOUT: 300
      WAIT_SLEEP_INTERVAL: 30
      WAIT_HOST_CONNECT_TIMEOUT: 30

    ports:
      - "80:1885"
      - "443:8885"
      - "1881:1881"
      - "1882:1882"
      - "1883:1883"
      - "1884:1884"
      - "1885:1885"
      - "1887:1887"
      - "8881:8881"
      - "8882:8882"
      - "8883:8883"
      - "8884:8884"
      - "8885:8885"
      - "8887:8887"
      - "1700:1700/udp"

  influxdb:
    image: influxdb:1.8
    container_name: influxdb 
    restart: unless-stopped
    ports:
      - '8086:8086'
    networks:
      - bridge
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=sensors
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=changeme

  grafana:
    image: grafana/grafana:latest
    container_name: grafana 
    restart: unless-stopped
    ports:
      - '3000:3000'
    networks:
      - bridge
    depends_on:
      - influxdb
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./volume/grafana/provisioning/:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=changeme

  node-red:
    image: nodered/node-red:latest
    container_name: node-red 
    restart: unless-stopped
    entrypoint: /data/entrypoint.sh
    environment:
      - TZ=Europe/Amsterdam
    ports:
      - "1880:1880"
    networks:
      - bridge
    depends_on:
      - influxdb
      - stack
    volumes:
      - ./volume/node-red/data:/data

volumes:
  influxdb-storage:
  grafana-storage:
  node-red-data:
  redis:
  postgres:
  stack-blob:
  stack-data:

networks:
  bridge:
